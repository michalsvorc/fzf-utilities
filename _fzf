#!/usr/bin/env bash
# Author: Michal Svorc <michalsvorc.com>

#===============================================================================
# Abort the script on errors and undbound variables
#===============================================================================

set -o errexit      # abort on nonzero exitstatus
set -o nounset      # abort on unbound variable
set -o pipefail     # don't hide errors within pipes
# set -o xtrace     # debugging

#===============================================================================
# Help
#===============================================================================

_print_help() {
cat <<HELP
Collection of common CLI outputs piped into fuzzy finder (fzf) search returning
a single value. Intended as an interactive filtered input for further Unix piping
or subshell composition.

Requiremets: fzf command available on \$PATH

Usage: _fzf [COMMAND]

Commands:
    -h|--help
        print this help text and exit

    ls-dir
        search: directories in \$PWD, including hidden and linked directories
        return: directory name
        example: cd ./\$(_fzf ls-dir)

    bash-history
        search: Bash command history
        return: command
        example: \$(_fzf bash-history)

    docker-images
        search: Docker images
        return: Docker image id
        example: docker image history \$(_fzf docker-images)

    docker-containers
        search: Docker containers
        return: Docker container id
        example: docker stop \$(_fzf docker-containers)

    docker-volumes
        search: Docker volumes
        return: Docker volume name
        example: docker volume inspect \$(_fzf docker-volumes)

fzf code repository: https://github.com/junegunn/fzf
HELP
}

#===============================================================================
# Functions
#===============================================================================

_die() {
    local error_message="${1}"
    printf 'Error: %s\nSee help for proper usage:\n\n' "${error_message}" >&2
	_print_help
    exit 1
}

_fzf_pipe() {
    fzf
}

_docker_containers() {
    local docker_containers_output="$(docker ps -a | sed 1d | _fzf_pipe | awk '{print $1}')"
    printf '%s' "${docker_containers_output}"
}

_docker_images() {
    local docker_images_output="$(docker images | sed 1d | _fzf_pipe | awk '{print $3}')"
    printf '%s' "${docker_images_output}"
}

_docker_volumes() {
    local docker_volumes_output="$(docker volume ls | sed 1d | _fzf_pipe | awk '{print $2}')"
    printf '%s' "${docker_volumes_output}"
}

_bash_history() {
    local bash_history_output="$(cat $HOME/.bash_history | _fzf_pipe)"
    printf '%s' "${bash_history_output}"
}

_ls_dir() {
    local ls_dir_output="$(tree -d -a -L 1 -i --noreport | cut -f1 -d"-" | cat - <(echo ..) | _fzf_pipe)"
    printf '%s' "${ls_dir_output}"
}

#===============================================================================
# Execution
#===============================================================================

if [ $# -eq 0 ]; then
    _die 'No arguments provided'
fi

case "${1}" in
    -h|--help)
        _print_help
        ;;
    bash-history)
        _bash_history
        ;;
    docker-images)
        _docker_images
        ;;
    docker-containers)
        _docker_containers
        ;;
    docker-volumes)
        _docker_volumes
        ;;
    ls-dir)
        _ls_dir
        ;;
    *)
        _die "Unknown argument '${1}'"
        ;;
esac

